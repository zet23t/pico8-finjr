pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
-- main
right = false
flicker = true
hit = 0

tile_2x2_stonewall = 160
tile_1x2_stonewall_rim_right = 162
tile_1x2_stonewall_rim_left = 163
tile_2x1_stonewall_rim_top = 144
tile_1x1_reet_roof_left = 130
tile_1x1_reet_roof_middle = 131
tile_1x1_reet_roof_right = 132
tile_1x1_window = 128
tile_1x1_door = 146
tile_1x1_grass_bottom_rim = 129
tile_1x1_flat_rocks = 84
tile_1x1_flat_rocks_x = 32
tile_1x1_flat_rocks_y = 40
tile_heart = 16

function rndint(n)
	return flr(rnd(n) + .5)
end
function _update()
	save()
	--print "yap"
end

local function rndn(n, x) 
	return flr(rnd(n)) * x
end

local active_layer = 1
local layer_calls = {{}}
local function layer(n)
	n = flr(n)
	if not layer_calls[n] then layer_calls[n] = {} end
	active_layer = n
	if (#layer_calls[n] == 0) l_pal()
end

local function copy_layers()
	local copy = {}
	for i=-8, 300 do
		local l = layer_calls[i]
		if l then
			copy[i] = {}
			for n=1,#l do 
				copy[i][n] = l[n]
			end
		end
	end
	return copy
end

local function paste_layers(copy)
	for i=-8, 300 do
		local l = copy[i]
		if l then
			if not layer_calls[i] then layer_calls[i] = {} end
			local dst = layer_calls[i]
			for n=1,#l do 
				dst[#dst+1] = l[n]
			end
		end
	end
end

local function flush_layers()
	for i=-8, 300 do
		local l = layer_calls[i]
		if l then
			for n=1,#l do 
				l[n]() 
				l[n] = nil
			end
		else
			layer_calls[i] = {}
		end
	end
	active_layer = 1
end

local function layer_call_cache(mapped_call)
	return function (...)
		local l = layer_calls[active_layer]
		local args = {...}
		l[#l+1] = function() 
			mapped_call(unpack(args))
		end
	end
end

l_sspr, l_pal = layer_call_cache(sspr), layer_call_cache(pal)
function l_spr(s,x,y,w,h,f,i) 
	local l = layer_calls[active_layer]
	l[#l+1] = function() spr(s,x,y,w or 1, h or 1, f, i) end
end

function l_call(f)
	local l = layer_calls[active_layer]
	l[#l+1] = f
end

function slice4spr(sx, sy, range, x, y)
	l_sspr(rndn(range, 8) + sx, sy, 4, 4, x, y)
	l_sspr(rndn(range, 8) + 4 + sx, sy, 4, 4, x + 4, y)
	l_sspr(rndn(range, 8) + sx, sy + 4, 4, 4, x, y + 4)
	l_sspr(rndn(range, 8) + 4 + sx, sy + 4, 4, 4, x + 4, y + 4)
end

local function idx128(x,y) return flr(x/8)*8 + flr(y/8)*8 * 128 end

local function rndsym(x) return rnd(x) - x*.5 end

local function path(stepsize, x1, y1, x2, y2, scatter, placecallback)
	local function halfit(x1,y1,x2,y2, n)
		local dx,dy = x2 - x1, y2 - y1
		local d = (dx * dx + dy * dy) ^ .5
		n += 1
		if (d < stepsize or n > 10) return
		local nx, ny = dx / d, dy / d
	
		local r = rndsym(scatter*d)
		local x,y = (x1 + x2) / 2 - r * ny, (y1 + y2) / 2 + r * nx
		placecallback(x,y, d)
		halfit(x1,y1,x,y, n)
		halfit(x,y,x2,y2, n)
	end
	halfit(x1,y1,x2,y2, 0)
end

function write_map(x,y,col)
	local ptr = 0x2000 + y*32 + x\2
	local v = @ptr
	if x%2 == 0 then
		v = col | (v & 0xf0)
	else
		v = col << 4 | (v & 0xf)
	end
	poke(ptr,v)
	-- for x=0,31 do
	-- 	for y = 0,63 do
	-- 		memset(0x2000 + y*32 + x,rnd()*256, 1)
	-- 	end
	-- end
end

local cached_map = {
	perlin = {},
	height = {}
}

local hscale = 10
local function ishigherthanwaterlevel(h) return h > -.085 / hscale end

local function map_get_height(hx,hy)
	local s = 0.005 / hscale
	hx,hy = hx * s - .1, hy * s - .1
	local d = (hx*hx+hy*hy)
	local h1 = perlin:noise(hx, hy,2.12)
	local h2 = perlin:noise(hx * 2, hy * 2,3.42)
	local h3 = perlin:noise(hx * 4, hy * 4,4.42)
	local h4 = perlin:noise(hx * 8, hy * 8,4.22)
	local h5 = perlin:noise(hx * 16, hy * 16,6.12)
	local h6 = perlin:noise(hx * 32, hy * 32,1.72)
	return h1 * .65 + h2 * .25 + h3 * .1 - h4 * .051 + h5 * .031 - h6 * 0.022 - d * .14 +.124
end

function save()
	dset(0, 1)
	dset(1, player_x)
	dset(2, player_y)
end

function _init()
	cls()
	print("starting game")
	cartdata("zet23t_finjr_1")
	local first_start = dget(0) == 0
	if first_start then
		player_x, player_y = 64, 64
	else
		player_x, player_y = dget(1), dget(2)
	end

	print("init: draw map")
	local heights = {}
	local possible_town_points = {}
	local function idx(x,y) return (x + 64) | (y + 64) << 8 end
	for x=-31,32 do
		for y=-31,32 do
			dither = (x + y) & 1
			local h = map_get_height(x * 128 + 64, y * 128 + 64)
			heights[idx(x,y)] = h
			local col = (ishigherthanwaterlevel(h + (dither * .2 + .1)) and 12) or 1
			if (ishigherthanwaterlevel(h)) col = (h < .25/hscale and 10 or 11)
			if (h > .228) col = h + dither * .15 > .3 and 5 or 6
			if (h > .38) col = 5

			if h > 0.02 and h < 0.2 then
				possible_town_points[#possible_town_points + 1] = {x,y}
			--	col = 7
			end

			write_map(x + 31, y + 31, col)
		end
	end

	srand(3)
	for i=1,25 do
		local x,y = unpack(possible_town_points[1 + flr(rnd(#possible_town_points))])
		write_map(x + 31, y + 31, 8)
	end
end

function draw_stone_wall(x,y, w, h, blockindex)
	layer(y + h - 8)
	for px=2,w-2,16 do
		for py=2,h,16 do
			l_spr(tile_2x2_stonewall, x + px, y + py, min(16,w-px)/8,min(16,h-py)/8)
		end
	end
	for py=0,h,16 do
		l_spr(tile_1x2_stonewall_rim_left,x-6,y + py, 1, min(16, h-py)/8)
		l_spr(tile_1x2_stonewall_rim_right,x + w-2,y + py, 1, min(16, h-py)/8)
	end
	for px=0,w,16 do
		l_spr(tile_2x1_stonewall_rim_top,x+px,y - 6, min(16,w-px)/8)
	end
	for px=0,w,8 do
		l_spr(tile_1x1_grass_bottom_rim,x + px, y + h - 8, min(8, w-px)/8)
		blockindex(x+px, y + h - 8)
	end
	--l_call(function() rect(x,y,x+w,y+h,0) end)
	--l_spr(tile_1x1_window, x+7, y + 4)
	--l_spr(tile_1x1_window, x+1, y + 4)
end

function draw_stone_house(x,y, w, h, blockindex)
	draw_stone_wall(x,y,w,h, blockindex)
	for px=7, w - 5, 8 do
		l_spr(tile_1x1_reet_roof_middle,x + px, y - 6, min(8, w-5-px)/8)
	end
	l_spr(tile_1x1_reet_roof_left, x - 1, y - 6)
	l_spr(tile_1x1_reet_roof_right, x - 5 + w, y - 6)
	local function rowsplit(x1,y1,x2,door)
		if (x2 - x1 < 6) return
		local t = rnd()*.5 + .25
		local mx = x1 * (1 - t) + x2 * t
		l_spr(door and tile_1x1_door or tile_1x1_window, mx-4, y1)
		rowsplit(x1, y1, mx - 5)
		rowsplit(mx + 5, y1, x2)
	end
	rowsplit(x+3,y + h - 8,x+w-3, true)
	rowsplit(x+6,y-5,x+w-9)
	for py=y+3,y + h - 14, 8 do
		rowsplit(x+2,py,x+w-2)
	end
end

local function prepare_map(sectionx, sectiony)
	if cached_map.sectionx == sectionx and cached_map.sectiony == sectiony then
		return cached_map
	end
	cached_map.sectionx = sectionx
	cached_map.sectiony = sectiony
	local ox, oy = sectionx * 128, sectiony * 128

	for x=0,120,8 do
		for y=0,120,8 do
			local pn = perlin:noise((ox + x) *.01,(oy + y)*.01,0)
			local pnn = perlin:noise((ox + x) *.0031,(oy + y)*.0031,1.42)
			local idx = idx128(x,y)
			cached_map.perlin[idx] = pnn * .25 + pn * .75
			cached_map.height[idx] = map_get_height((ox + x),(oy + y))
		end
	end

	
	local blocked = {}
	local function blockindex(x,y) return flr(x / 16) + flr(y/16) * 256 end
	local function block(x,y) blocked[blockindex(x,y)] = true end
	local function isblocked(x,y) return blocked[blockindex(x,y)] end
	
	local function road(x1,y1,x2,y2)
		layer(3)
		l_pal(4,5)
		l_pal(5,10)
		path(6,x1,y1,x2,y2,.5, function(x,y,d)
			local idx = idx128(x,y)
			local h = cached_map.height[idx]
			if not h or h < 0 then return end
			
			-- if d > 8 then
			-- 	l_spr(83 + rnd(3), x, y - 6, .5, .5)
			-- 	layer(5)
			-- end
			local n = 90 + rnd(2)
			layer(3)
			if rnd()> .17 then
				local rspr = 70 + (rnd() > .5 and 0 or 16)
				l_spr(rspr, x + rndsym(10), y + rndsym(10),1,1, fx, fy)
			end
			l_spr(n, x-2, y-3)
			layer(4)
			l_spr(n, x-2, y-2)
			layer(5)
			if rnd() > .9 then
				l_sspr(tile_1x1_flat_rocks_x + rndint(1) * 4, tile_1x1_flat_rocks_y + rndint(1) * 4, 4, 4, x - 3 + rndsym(2), y - 3 + rndsym(2))
			end
			block(x,y)
		end)
	end
	srand(sectionx + sectiony * 10)

	-- draw_stone_wall(20,30,16 + rnd(10),10+rnd(10), block)
	-- draw_stone_wall(50,25,36 + rnd(10),20+rnd(10), block)
	-- draw_stone_house(20,80,16 + rnd(10),10 + rnd(10), block)
	-- draw_stone_house(50,85,36 + rnd(10),20 + rnd(10), block)


	local cx,cy = 64 +rndsym(48), 64 + rndsym(48)
	srand(sectionx * 4 + (sectiony - .5) * 10)
	if rnd() > .05 then
		road(cx,cy + 5,rndsym(30)+60,-8)
	end
	srand(sectionx * 4 + (sectiony + .5) * 10)
	if rnd() > .05 then
		road(cx,cy - 5,rndsym(30)+60,128)
	end
	srand((sectionx-.5) * 4 + sectiony * 10)
	if rnd() > .05 then
		road(cx + 5,cy,-8, rndsym(30)+60)
	end
	srand((sectionx+.5) * 4 + sectiony * 10)
	if rnd() > .05 then
		road(cx - 5,cy,128, rndsym(30)+60)
	end

	srand(sectionx + sectiony * 10)
	local roads = {}
	local rims = {}
	local function add_rim(x,y)
		local idx = x + y*256
		rims[idx] = (rims[idx] or 0) + 1
	end
	local function rim_sprite(x,y)
		l_pal(5, 9 + rnd(2))
		l_spr(70 + rnd(2.1), x - 2 + rndsym(2), y - 2 + rndsym(2), .5, .5)
	end
	local function draw_rims()
		layer(0)
		l_pal()
		for idx, c in pairs(rims) do
			if c == 1 then
				local x = idx % 256
				local y = idx \ 256
				if x % 8 == 4 then
					if (y > 0 and y < 128) path(2, x-4, y, x+4, y, .35,rim_sprite)
				else
					if (x > 0 and x < 128) path(2, x, y-4, x, y+4, .35,rim_sprite)
				end
			end
		end
	end

	local sea_count = 0	
	for x=0,120,8 do
		for y=0,120,8 do
			local idx = idx128(x,y)
			local pn = cached_map.perlin[idx]
			local h = cached_map.height[idx]
			--print(flr((h*5 + 5)%1*10),x,y)
			layer(-1)
			
			if h < 0 then
				sea_count += 1
				if ishigherthanwaterlevel(h) then
				-- sand
					l_pal(3, 9)
					l_pal(11, 10)
					l_spr(64 + rnd(3), x, y)
					add_rim(x+4,y)
					add_rim(x+4,y+8)
					add_rim(x,y+4)
					add_rim(x+8,y+4)
					-- for i=1,2 do
					-- 	l_spr(70 + rnd(3.1), x - 2, y + rnd(10) - 2, .5, .5)
					-- 	l_spr(70 + rnd(3.1), x + 6, y + rnd(10) - 2, .5, .5)
					-- 	l_spr(70 + rnd(3.1), x + rnd(10) - 2, y - 2, .5, .5)
					-- 	l_spr(70 + rnd(3.1), x + rnd(10) - 2, y + 6, .5, .5)
					-- end
				else
					local rand = rnd(4)
					l_call(function()
						-- layer(-1)
						if h > -.12 / hscale then
							pal(12, 7)
						end
						-- waves
						if (sin(x*.001 + y*.001 + h*12 + pn - time() * .25) * cos(h*10 + time()*-.12 + x*.009 + y*.0027) > 0) then
							pal(12, 1)
						end
						spr(76 + (rand + time() * 4)%4, x, y)
						pal()
					end)
				end
				l_pal()
			else
				if rnd()<.2 then l_pal(3,10)
				elseif rnd()<.2 then l_pal(3,8) 
				elseif rnd()<.1 then l_pal(3,12) end
				l_spr(64 + rnd(3), x, y)
				l_pal()
				
				if abs(pn) * 4 > rnd() then
					local rspr = 70 + abs(pn) * 4 + (rnd() > .5 and 0 or 16)
					local fx, fy = rnd()>.5, rnd()>.5
					if pn < 0 then
						-- rocky ground
						l_pal(5,3)
						l_spr(rspr, x, y,1,1, fx, fy)
					else
						--l_pal(5,6)
						l_spr(rspr, x, y,1,1, fx, fy)
					end
				end
				
				local spx, spy = x + rnd(4), y + rnd(4)
				if not isblocked(spx, spy) then
					layer(spy)
					if rnd() < pn - .25 then
						--rocks
						slice4spr(24,32,3, spx,spy)
					elseif rnd() > 0.8 and pn < 0 and pn > -.15 then
						-- trees
						if rnd() > .7 then
							l_spr(97, spx, spy)
							l_spr(99, spx, spy - 4)
						else
							l_spr(115, spx, spy)
							if rnd() > .23 then
								l_spr(101, spx, spy - 8, 1, 2)
							else
								l_spr(105, spx-4, spy - 8, 2, 2)
							end
						end
						--[[l_spr(99, spx + rndsym(2), spy - 4+rndsym(2))
						if rnd() > .5 then
							l_spr(99, spx + rndsym(2), spy - 8+rndsym(2))
							l_spr(100, spx + rndsym(4), spy - 4+rndsym(2), .5, .5)
						end
						if rnd() > .5 then
							l_spr(100, spx + rndsym(4)-2, spy - 4+rndsym(2), .5, .5)
						end]]
						--slice4spr(0, 48, 3, spx, spy)
					elseif rnd() > pn + .8 then
					-- dead trees
						--slice4spr(0, 40, 3, spx, spy)
					end
				end
				layer(1)
			end
		end
	end
	draw_rims()
	cached_map.sea_count = sea_count
	cached_map.layer_copy = copy_layers()
	
	return cached_map
end

function playfoot()
	if (stat(16) == -1) sfx(5, 0, flr(rnd(3))*2,2)
end

sfx(4, 1)

function print_centered(t, x, y, c)
	print(t, x - #t * 2, y, c)
end

function menu_mode_map()
	return function()
		for y=0,63 do
			memcpy(0x6000 + 32/2 + (32 + y)*128/2, 0x2000 + y * 32, 64/2)
		end
		camera(-(sectionx + 32) - 31, -(sectiony + 32) - 31)
		line(-3,-3,-1,-1,7)
		line(3,3,1,1,7)
		line(3,-3,1,-1,7)
		line(-3,3,-1,1,7)
		camera()

		if (btnp(0)) player_x -= 128
		if (btnp(1)) player_x += 128
		if (btnp(2)) player_y -= 128
		if (btnp(3)) player_y += 128
	end
end

function menu_mode_main()
	local active = 1
	return function()
		local m = 1
		local function menu_item(t, f)
			print_centered(t, 64, 32 + m * 8,active == m and 10 or 9)
			if active == m and btnp(1) and f then
				menu_mode = f() or menu_mode
			end
			m += 1
			return menu_item
		end
		
		menu_item("mode: < interact >", nil) ("open inventory >", nil) ("open map >", menu_mode_map)
		if (btnp(3)) active = active % 3 + 1
		if (btnp(2)) active = (active+1) % 3 + 1
	end
end

function _draw()
	flicker = not flicker
	cls()
	
	sectionx = player_x \ 128
	sectiony = player_y \ 128
	local cached_map = prepare_map(sectionx, sectiony)
	local ox, oy = sectionx * 128, sectiony * 128
	paste_layers(cached_map.layer_copy)

	srand(time())
	if cached_map.sea_count == 0 then
		sfx(4, -2)
		if rnd(9.4) > 9 then
			sfx(6, 1, rnd(6), 1)
		end
	else
		sfx(4, 1)
	end

	--camera(-sectionx * 128, -sectiony * 128)
	
	if hit > 0 then
		hit = hit + 1
		if hit == 5 then hit = 0 end
	end

	local speed = btn(5) and 128 or 1
	local ampl = 0

	if not menu_mode then
		if (btn(0)) player_x -= speed right = false ampl = 2 playfoot()
		if (btn(1)) player_x += speed right = true ampl = 2 playfoot()
		if (btn(2)) player_y -= speed ampl = 2 playfoot()
		if (btn(3)) player_y += speed ampl = 2 playfoot()
		if (btnp(4)) hit = 1 sfx(3)
	end
	
--	layer(2)
	local ppyg = player_y - sectiony * 128
	layer(ppyg)
	local ppx = player_x - sectionx * 128
	local ppy = ppyg - ampl * (abs(sin(time() * 4)) - .5 )
	l_spr(0, ppx, ppyg + 4)
	l_spr(1, ppx, ppy, 1, 1, right)
	
	l_spr(208 - sin(hit / 10) * 2.9,ppx + (right and 3 or -3), ppy, 1, 1, right)
	flush_layers()

	pal()
	hearts = 4
	local x2 = hearts * 9
	rectfill(0,0,x2-1,8,0)
	line(x2,0,x2,7,0)
	line(x2+1,0,x2+1,5,0)
	for i=0,3 do
		spr(tile_heart,i * 9,0)
	end

	if btnp(5) or menu_mode then
		rect(25,25,104,104,1)
		rectfill(24,24,103,103,4)
		line(25,24,25,103,10)
		line(102,24,102,103,10)
		if not menu_mode then
			menu_mode = menu_mode_main()
			menu_mode()
		elseif btnp(5) then
			menu_mode = nil
		else
			menu_mode()
		end
		--map(0,0,32,32,)
	else
		menu_mode = nil
	end

--	map(0,0,0,0,128/8,128/8)

	rectfill(0,120,128,128,4)
	--print(stat(1),5,122,0)
	print(sectionx.." "..sectiony.." - "..stat(1).." - "..stat(0),2,122,0)
end

-->8
-- perlin

perlin = {}
perlin.p = {}

-- hash lookup table as defined by ken perlin
-- this is a randomly arranged array of all numbers from 0-255 inclusive
local permutation = {151,160,137,91,90,15,
  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
  190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
  88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
  102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
  135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
  223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
  129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
  251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
  49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
}

-- p is used to hash unit cube coordinates to [0, 255]
for i=0,255 do
    -- convert to 0 based index table
    perlin.p[i] = permutation[i+1]
    -- repeat the array to avoid buffer overflow in hash function
    perlin.p[i+256] = permutation[i+1]
end

-- return range: [-1, 1]
function perlin:noise(x, y, z)
    y = y or 0
    z = z or 0

    -- calculate the "unit cube" that the point asked will be located in
    local xi = band(flr(x),255)
    local yi = band(flr(y),255)
    local zi = band(flr(z),255)

    -- next we calculate the location (from 0 to 1) in that cube
    x = x - flr(x)
    y = y - flr(y)
    z = z - flr(z)

    -- we also fade the location to smooth the result
    local u = self.fade(x)
    local v = self.fade(y)
    local w = self.fade(z)

    -- hash all 8 unit cube coordinates surrounding input coordinate
    local p = self.p
    local a, aa, ab, aaa, aba, aab, abb, b, ba, bb, baa, bba, bab, bbb
    a   = p[xi  ] + yi
    aa  = p[a   ] + zi
    ab  = p[a+1 ] + zi
    aaa = p[ aa ]
    aba = p[ ab ]
    aab = p[ aa+1 ]
    abb = p[ ab+1 ]

    b   = p[xi+1] + yi
    ba  = p[b   ] + zi
    bb  = p[b+1 ] + zi
    baa = p[ ba ]
    bba = p[ bb ]
    bab = p[ ba+1 ]
    bbb = p[ bb+1 ]

    -- take the weighted average between all 8 unit cube coordinates
    return self.lerp(w,
        self.lerp(v,
            self.lerp(u,
                self:grad(aaa,x,y,z),
                self:grad(baa,x-1,y,z)
            ),
            self.lerp(u,
                self:grad(aba,x,y-1,z),
                self:grad(bba,x-1,y-1,z)
            )
        ),
        self.lerp(v,
            self.lerp(u,
                self:grad(aab,x,y,z-1), self:grad(bab,x-1,y,z-1)
            ),
            self.lerp(u,
                self:grad(abb,x,y-1,z-1), self:grad(bbb,x-1,y-1,z-1)
            )
        )
    )
end

-- gradient function finds dot product between pseudorandom gradient vector
-- and the vector from input coordinate to a unit cube vertex
perlin.dot_product = {
    [0x0]=function(x,y,z) return  x + y end,
    [0x1]=function(x,y,z) return -x + y end,
    [0x2]=function(x,y,z) return  x - y end,
    [0x3]=function(x,y,z) return -x - y end,
    [0x4]=function(x,y,z) return  x + z end,
    [0x5]=function(x,y,z) return -x + z end,
    [0x6]=function(x,y,z) return  x - z end,
    [0x7]=function(x,y,z) return -x - z end,
    [0x8]=function(x,y,z) return  y + z end,
    [0x9]=function(x,y,z) return -y + z end,
    [0xa]=function(x,y,z) return  y - z end,
    [0xb]=function(x,y,z) return -y - z end,
    [0xc]=function(x,y,z) return  y + x end,
    [0xd]=function(x,y,z) return -y + z end,
    [0xe]=function(x,y,z) return  y - x end,
    [0xf]=function(x,y,z) return -y - z end
}
function perlin:grad(hash, x, y, z)
    return self.dot_product[band(hash,0xf)](x,y,z)
end

-- fade function is used to smooth final output
function perlin.fade(t)
    return t * t * t * (t * (t * 6 - 15) + 10)
end

function perlin.lerp(t, a, b)
    return a + t * (b - a)
end
__gfx__
00000000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000019999100099990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00010100001ff910000ff90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00101010001999100009990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01010100014444100044440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00101000014444100044440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001f44f1000f44f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001cc100000dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07200720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e882e882000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e8888882000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08888820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00082000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000500005005005050550555004440444000044400444404441111cc11111111111111cc1111111111
bbbbbbbbbbbbbbbbbbbbbbbb000000000006000000006600000505005055055050050555044444440404444044000044c111111c11111cc11111111111111cc1
b3bbbbbbbbbbbb3bbbbbbbbb00066600006656500066656050500000055050050055050544444040044444404000000411111111cc111111111111cc11111111
bbbbbbbbb3bbbbbbbbbbbbbb0066655006655511066655500000505000050550505055554400444444444444000000001cc11111111111111cc11111c111111c
bbbbbbbbbbbbbbbbbbbbbbbb06665510066655510666555005000005505050005555505540444440444440404000000411111cc111cc11111111111111cc1111
bbbbbbbbbbbbbbbbbbbbbbbb06555110065551110665511100050500050005050505050544440404040444400040000411111111111111cc111cc11111111111
bbbb3bbbbbbbbbbbbbbbbbbb00551100055511000005110050005050005505005055505000444044004444004400004411cc111111111111c111111c1111cc11
bbbbbbbbbbbbbbbbbbbbbbbb00000000005000000000000000050000550050055055005544044044000404004440044011111111111cc11111111111cc111111
000b0b000000000000b0400000000000066000000000000000005000050050500550505000000000000040000004000000000000000000000000000000000000
0b0bb33000a0ba30033443b006000660566600660000000005000005500505005005050500000000044440000444440400000000000000000000000000000000
bb33b3bb0aa0b0bb44340b4b65100510056500650000000000000000005000050050005000444400044444400444444400000000000000000000000000000000
33b0b3330ab0ba30bb44044b00000000000000000000000000000500000500000050500004444000044444440444444400000000000000000000000000000000
03bbb3b000bbb3000bb4440000000000000000000000000000000000050000500500055500044400444444404444444000000000000000000000000000000000
3b3b313000bb3bb00014430300006650066066500000000000050050000500005055505000444400044444404444444400000000000000000000000000000000
03b33b1000b45b000004303065006510065056650000000000000000500055000005000500040000004444000444444000000000000000000000000000000000
00144100000450000004400000000000000005550000000050000000005000055050050000000000000040000040440000000000000000000000000000000000
008040000000400000004000001b10000b3000b0000000000000000000000000000000000000001b110000000000000000000000000000000000000000000000
099440e0000440000a04400001aaab10bab30ba10001310000000000000000000000000000001baba10000000000000000000000000000000000000000000000
4494494e4404404045b5034013bab3313b110310001bb3100000000000000000000000000001baaaab0310000000000000000000000000000000000000000000
994404490044044003440450133333b10110000000ba3b100000000000000000000000000003abaaabb110000000000000000000000000000000000000000000
0e94440000444400000444301ab33b110000000001ba1b100000000000000000000000000000b1bbbb1bb0000000000000000000000000000000000000000000
001043030004400000044300311333330bb000b31bb1bb2100000000000000000000000001101b11111b00100000000000000000000000000000000000000000
000440300044500000440000133bb311bb130b103121b2130000000000000000000000000133b13333330bb10000000000000000000000000000000000000000
00045500000455000044400001111110011000001333333b00000000000000000000000011b311bbbb33bbd30000000000000000000000000000000000000000
00000000000000000000000000400000000000001bb33bb2000000000000000000000000b1bb3311133bb1310000000000000000000000000000000000000000
00000000000000000000000000440044000000003123bb100000000000000000000000003d1b3333333113310000000000000000000000000000000000000000
0000000000000000000000004444445000000000033312330000000000000000000000001131bbbbbb3313110000000000000000000000000000000000000000
00000000000000000000000000444550000000001bbb313100000000000000000000000001133111133131100000000000000000000000000000000000000000
00000000000000000000000000045500000000000123132000000000000000000000000000111133331311000000000000000000000000000000000000000000
00000000000000000000000000445500000000000331311000000000000000000000000000011111111110000000000000000000000000000000000000000000
00000000000000000000000004444550000000000001110000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000554500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0055550000000000000000999a499a999a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05521dd0000000000000a99999999a9a999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0521216000000000000a49994a99999999a490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0512126050000000049999999a4a4994949944000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05444460005000054a94a9499a4949499a4999400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
099999900b010010a94a94a949499a9499a499440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
004004001b01b00b44994a9949994a49999444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000003b1b113b4444444444444444444444220000200000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000005511115600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000005122221600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00770007770000005244442600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
076660766660007d5244499600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d66dddd66dd776d5242422600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55d6d555dd55d66d5244444500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
765d577557775dd51222222100000000440044400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66d5766d55766d5766d5000000000067444449440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66d5d6d775dd6d5766d5000000000067249449490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6d555d576d55dd566d55000000000066249444490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d57765d6d56d5555d577500000000055444444490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
57666d5d566d577d576650000000077d444944490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5dd66d555dd5766d5dd500000000066d444924440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
555dd7765555d6d555550000000006d5494924440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
76d55766d5775d5576d0000000000d55494449440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6d5765dd576665576d50000000000067042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dd566d577566dd5ddd5000000000006649a200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d55d576d5dd55555d5500000000005d4a9200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
557775d6dd5557765577500000000076944200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d766665d57d57666d766500000000666442200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5dd66dd776d5d66d5dd650000000066d944200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
555dd55d66d55d6d5555000000000d6d442200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77557775dd5765d577550000000000d5944200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000044554400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000041111400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00999900041aa1400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0944442004a999400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01166110011111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09455420044114400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09444420044444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01111110044444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00006500500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00006500650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00006500065090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00099990006900000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000a900009a900066669aa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000a9000000a9005555999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8283838385000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a0a0a0a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4040404040400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000e00000244502405024451b405024450440522405024050244502405024050040502445024050244502405024451d4051340511405024450a40500405004050244500405024450040502445004050040500405
001600002715027150291502b15027150291502b15027150291502b1502e150291502b1502b1502e1502b1502e1502e1502e1502e150301502915029150291502b1502b1502e1502e1502e150301503315033150
01160000033220332203322033220532205322053220332207322073220732207322073220732207322073220732207322073220732207322073220732205322053220532205322073220a3220a3220a3220a322
000100000020127451234511c45117451134510e4510a4510e451182111040112401154011a401204012240100201002010020100201002010020100201002010020100201002010020100201002010020100201
00140020086210962109621096310a6310a6210a6110a6110961108611086110861108621096210a6210a631096310962109631096310a631096210862108611096110a6110a6210b6210b6210b6310b6210a621
010a00000c6440c6450e6340e63508624076250060400604006040060400604006040060400604006040060400604006040060400604006040060400604006040060400604000000000000000000000000000000
000a00003e1133f1233d5333e5133f523005030050300503005030050300503005030050300503005030050300503005030050300000000000000000000000000000000000000000000000000000000000000000
__music__
07 01024344
01 01024344
02 02424344

